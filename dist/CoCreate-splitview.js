(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["splitview"] = factory();
	else
		root["CoCreate"] = root["CoCreate"] || {}, root["CoCreate"]["splitview"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "../CoCreate-components/CoCreate-splitview/src/CoCreate-splitview.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../CoCreate-components/CoCreate-splitview/src/CoCreate-splitview.js":
/*!***************************************************************************!*\
  !*** ../CoCreate-components/CoCreate-splitview/src/CoCreate-splitview.js ***!
  \***************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nvar splitterHorizontalArray = document.getElementsByClassName(\"svSplitter svHorizontal\");\nvar splitterVerticalArray = document.getElementsByClassName(\"svSplitter svVertical\");\n\nfor (var i = 0; i < splitterHorizontalArray.length; i++) {\n  splitterHorizontalArray[i].addEventListener('mousedown', initDragHorizontal, false);\n  splitterHorizontalArray[i].addEventListener('touchstart', initDragHorizontal, false);\n}\n\nfor (var _i = 0; _i < splitterVerticalArray.length; _i++) {\n  splitterVerticalArray[_i].addEventListener('mousedown', initDragVertical, false);\n\n  splitterVerticalArray[_i].addEventListener('touchstart', initDragVertical, false);\n}\n\nvar thisSplitter, myFamily, myPosition, myAboveDiv, myBelowDiv, myLeftDiv, myRightDiv, startMouseX, startTouchX, startMouseY, startTouchY, startHeightAbove, startHeightBelow, startWidthLeft, startWidthRight, startWindowWidth, beforeScreenResizeWidthLeft, beforeScreenResizeWidthRight, totalWidth, totalHeight, totalDiv, svColumnDivArr, svColumnDivWidthArray, svPanelDivArr, svPanelDivHeightArr, containerDiv, containerDivWidth, containerDivHeight, minMoveLimit, maxMoveLimit, mySplitterFamily, mySplitterPosition, restSplitterBelowHeight, restSplitterAboveHeight, restSplitterRightWidth, restSplitterleftWidth; //////////////////////////////// Horizontal Resizing ////////////////////////\n\nfunction initDragHorizontal(e) {\n  thisSplitter = e.target;\n  totalHeight = parseInt(document.defaultView.getComputedStyle(e.path[1]).height, 10);\n  /*myFamily: Above, Splitter, Below Divs*/\n\n  myFamily = [];\n\n  for (var _i2 = 0; _i2 < e.path[1].children.length; _i2++) {\n    myFamily.push(e.path[1].children[_i2]);\n  }\n\n  svPanelDivArr = [];\n  myFamily.forEach(function (family) {\n    if (family.classList.contains(\"svPanel\")) svPanelDivArr.push(family);\n  });\n  svPanelDivHeightArr = [];\n  svPanelDivArr.forEach(function (panel) {\n    svPanelDivHeightArr.push(parseInt(document.defaultView.getComputedStyle(panel).height, 10));\n  });\n  /*Dont allow other divs move together*/\n\n  for (var _i3 = 0; _i3 < svPanelDivArr.length; _i3++) {\n    svPanelDivArr[_i3].style.minHeight = svPanelDivHeightArr[_i3] * 100 / totalHeight + '%';\n    svPanelDivArr[_i3].style.pointerEvents = \"none\";\n  }\n\n  e.path.forEach(function (element) {\n    if (element.classList && element.classList.contains(\"container\")) containerDiv = element;\n  });\n  containerDivHeight = parseInt(document.defaultView.getComputedStyle(containerDiv).height, 10);\n  myPosition = myFamily.indexOf(thisSplitter);\n  myAboveDiv = myFamily[myPosition - 1];\n  myBelowDiv = myFamily[myPosition + 1];\n  /*My Splitter Group*/\n\n  mySplitterFamily = [];\n  myFamily.forEach(function (family) {\n    if (family.classList.contains(\"svSplitter\") && family.classList.contains(\"svHorizontal\")) mySplitterFamily.push(family);\n  });\n  mySplitterPosition = mySplitterFamily.indexOf(thisSplitter); // restSplitterBelowHeight = parseInt(document.defaultView.getComputedStyle(thisSplitter).height,10)*(mySplitterFamily.length-mySplitterPosition)+parseInt(document.defaultView.getComputedStyle(thisSplitter).height,10)/2;\n  // restSplitterAboveHeight = parseInt(document.defaultView.getComputedStyle(thisSplitter).height,10)*(mySplitterPosition)+parseInt(document.defaultView.getComputedStyle(thisSplitter).height,10)/2;\n\n  /*Splitter own heights*/\n\n  restSplitterBelowHeight = parseInt(document.defaultView.getComputedStyle(thisSplitter).height, 10) * (mySplitterFamily.length - mySplitterPosition - 1);\n  restSplitterAboveHeight = parseInt(document.defaultView.getComputedStyle(thisSplitter).height, 10) * mySplitterPosition;\n  if (e.type == \"mousedown\") startMouseY = e.clientY;\n  if (e.type == \"touchstart\") startTouchY = e.touches[0].clientY;\n  startHeightAbove = parseInt(document.defaultView.getComputedStyle(myAboveDiv).height, 10);\n  startHeightBelow = parseInt(document.defaultView.getComputedStyle(myBelowDiv).height, 10);\n  minMoveLimit = startMouseY - startHeightAbove;\n  maxMoveLimit = startMouseY + startHeightBelow;\n  document.documentElement.addEventListener('mousemove', doDragHorizontal, false);\n  document.documentElement.addEventListener('mouseup', stopDragHorizontal, false);\n  document.documentElement.addEventListener('touchmove', doDragHorizontal, false);\n  document.documentElement.addEventListener('touchend', stopDragHorizontal, false);\n}\n\nfunction doDragHorizontal(e) {\n  if (e.type == \"mousemove\" && e.clientY > minMoveLimit && e.clientY < maxMoveLimit && e.clientY > restSplitterAboveHeight + 15 && e.clientY < containerDivHeight + 15 - restSplitterBelowHeight) {\n    myAboveDiv.style.minHeight = (startHeightAbove + e.clientY - startMouseY) * 100 / totalHeight + '%';\n    myBelowDiv.style.minHeight = (startHeightBelow - e.clientY + startMouseY) * 100 / totalHeight + '%';\n  }\n\n  if (e.type == \"touchmove\" && e.touches[0].clientY > startTouchY - startHeightAbove && e.touches[0].clientY < startTouchY + startHeightBelow && e.touches[0].clientY > restSplitterAboveHeight + 15 && e.touches[0].clientY < containerDivHeight + 15 - restSplitterBelowHeight) {\n    myAboveDiv.style.minHeight = (startHeightAbove + e.touches[0].clientY - startTouchY) * 100 / totalHeight + '%';\n    myBelowDiv.style.minHeight = (startHeightBelow - e.touches[0].clientY + startTouchY) * 100 / totalHeight + '%';\n  }\n}\n\nfunction stopDragHorizontal(e) {\n  for (var _i4 = 0; _i4 < svPanelDivArr.length; _i4++) {\n    svPanelDivArr[_i4].style.pointerEvents = \"auto\";\n  }\n\n  document.documentElement.removeEventListener('mousemove', doDragHorizontal, false);\n  document.documentElement.removeEventListener('mouseup', stopDragHorizontal, false);\n  document.documentElement.removeEventListener('touchmove', doDragHorizontal, false);\n  document.documentElement.removeEventListener('touchend', stopDragHorizontal, false);\n} //////////////////////////////// Vertical Resizing //////////////////////////\n\n\nfunction initDragVertical(e) {\n  thisSplitter = e.target;\n  totalDiv = e.path[1];\n  totalWidth = parseInt(document.defaultView.getComputedStyle(totalDiv).width, 10);\n  myFamily = [];\n\n  for (var _i5 = 0; _i5 < e.path[1].children.length; _i5++) {\n    myFamily.push(e.path[1].children[_i5]);\n  }\n\n  svColumnDivArr = [];\n  myFamily.forEach(function (family) {\n    if (family.classList.contains(\"svColumn\")) {\n      svColumnDivArr.push(family);\n    }\n  });\n  svColumnDivWidthArray = [];\n  svColumnDivArr.forEach(function (svColumnDiv) {\n    svColumnDivWidthArray.push(parseInt(document.defaultView.getComputedStyle(svColumnDiv).width, 10));\n  });\n\n  for (var _i6 = 0; _i6 < svColumnDivArr.length; _i6++) {\n    svColumnDivArr[_i6].style.minWidth = svColumnDivWidthArray[_i6] * 100 / totalWidth + '%';\n    svColumnDivArr[_i6].style.pointerEvents = \"none\";\n  }\n\n  e.path.forEach(function (element) {\n    if (element.classList && element.classList.contains(\"svColumn\")) containerDiv = element;\n  });\n  containerDivWidth = parseInt(document.defaultView.getComputedStyle(containerDiv).width, 10);\n  myPosition = myFamily.indexOf(thisSplitter);\n  myLeftDiv = myFamily[myPosition - 1];\n  myRightDiv = myFamily[myPosition + 1];\n  mySplitterFamily = [];\n  myFamily.forEach(function (family) {\n    if (family.classList.contains(\"svSplitter\") && family.classList.contains(\"svVertical\")) mySplitterFamily.push(family);\n  });\n  mySplitterPosition = mySplitterFamily.indexOf(thisSplitter); // restSplitterRightWidth = parseInt(document.defaultView.getComputedStyle(thisSplitter).width,10)*(mySplitterFamily.length-mySplitterPosition)+parseInt(document.defaultView.getComputedStyle(thisSplitter).width,10)/2;\n  // restSplitterleftWidth = parseInt(document.defaultView.getComputedStyle(thisSplitter).width,10)*(mySplitterPosition)+parseInt(document.defaultView.getComputedStyle(thisSplitter).width,10)/2;\n\n  restSplitterRightWidth = parseInt(document.defaultView.getComputedStyle(thisSplitter).width, 10) * (mySplitterFamily.length - mySplitterPosition - 1);\n  restSplitterleftWidth = parseInt(document.defaultView.getComputedStyle(thisSplitter).width, 10) * mySplitterPosition;\n  if (e.type == \"mousedown\") startMouseX = e.clientX;\n  if (e.type == \"touchstart\") startTouchX = e.touches[0].clientX;\n  startWindowWidth = window.innerWidth;\n  startWidthLeft = parseInt(document.defaultView.getComputedStyle(myLeftDiv).width, 10);\n  startWidthRight = parseInt(document.defaultView.getComputedStyle(myRightDiv).width, 10);\n  minMoveLimit = startMouseX - startWidthLeft;\n  maxMoveLimit = startMouseX + startWidthRight;\n  document.documentElement.addEventListener('mousemove', doDragVertical, false);\n  document.documentElement.addEventListener('mouseup', stopDragVertical, false);\n  document.documentElement.addEventListener('touchmove', doDragVertical, false);\n  document.documentElement.addEventListener('touchend', stopDragVertical, false);\n  window.addEventListener('resize', doDragVertical, false);\n}\n\nfunction doDragVertical(e) {\n  if (e.type == \"mousemove\" && e.clientX > minMoveLimit && e.clientX < maxMoveLimit && e.clientX > restSplitterleftWidth + 15 && e.clientX < containerDivWidth + 15 - restSplitterRightWidth) {\n    myLeftDiv.style.minWidth = (startWidthLeft + e.clientX - startMouseX) * 100 / totalWidth + '%';\n    myRightDiv.style.minWidth = (startWidthRight - e.clientX + startMouseX) * 100 / totalWidth + '%';\n    beforeScreenResizeWidthLeft = parseInt(startWidthLeft + e.clientX - startMouseX, 10);\n    beforeScreenResizeWidthRight = parseInt(startWidthRight - e.clientX + startMouseX, 10);\n  }\n\n  if (e.type == \"touchmove\" && e.touches[0].clientX > startTouchX - startWidthLeft && e.touches[0].clientX < startTouchX + startWidthRight && e.touches[0].clientX > restSplitterleftWidth + 15 && e.touches[0].clientX < containerDivWidth + 15 - restSplitterRightWidth) {\n    myLeftDiv.style.minWidth = (startWidthLeft + e.touches[0].clientX - startTouchX) * 100 / totalWidth + '%';\n    myRightDiv.style.minWidth = (startWidthRight - e.touches[0].clientX + startTouchX) * 100 / totalWidth + '%';\n    beforeScreenResizeWidthLeft = parseInt(startWidthLeft + e.touches[0].clientX - startTouchX, 10);\n    beforeScreenResizeWidthRight = parseInt(startWidthRight - e.touches[0].clientX + startTouchX, 10);\n  }\n\n  if (e.type == \"resize\") {\n    if (window.innerWidth < startWindowWidth) myLeftDiv.style.width = (beforeScreenResizeWidthLeft - (startWindowWidth - window.innerWidth)) * 100 / totalWidth + '%';\n    if (window.innerWidth > startWindowWidth) myLeftDiv.style.width = (beforeScreenResizeWidthRight + (window.innerWidth - startWindowWidth)) * 100 / totalWidth + '%';\n  } // myLeftDiv.classList.remove(\"svPanel\")\n  // myRightDiv.classList.remove(\"svPanel\")\n\n}\n\nfunction stopDragVertical(e) {\n  for (var _i7 = 0; _i7 < svColumnDivArr.length; _i7++) {\n    svColumnDivArr[_i7].style.pointerEvents = \"auto\";\n  }\n\n  document.documentElement.removeEventListener('mousemove', doDragVertical, false);\n  document.documentElement.removeEventListener('mouseup', stopDragVertical, false);\n  document.documentElement.removeEventListener('touchmove', doDragVertical, false);\n  document.documentElement.removeEventListener('touchend', stopDragVertical, false);\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  initDragHorizontal: initDragHorizontal,\n  doDragHorizontal: doDragHorizontal,\n  stopDragHorizontal: stopDragHorizontal,\n  initDragVertical: initDragVertical,\n  doDragVertical: doDragVertical,\n  stopDragVertical: stopDragVertical\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-components/CoCreate-splitview/src/CoCreate-splitview.js\n");

/***/ })

/******/ })["default"];
});